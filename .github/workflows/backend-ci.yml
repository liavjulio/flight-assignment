name: Backend CI/CD

on:
  push:
    branches: [main, develop]
    paths: ['backend/**', '.github/workflows/backend-ci.yml']
  pull_request:
    branches: [main, develop]
    paths: ['backend/**', '.github/workflows/backend-ci.yml']

jobs:
  lint-and-test:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:15
        ports:
          - 5432:5432
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: flight_booking_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18
          cache: 'npm'
          cache-dependency-path: backend/package-lock.json

      - name: Install Dependencies
        run: npm ci
        working-directory: ./backend

      - name: Run Linting
        run: npm run lint
        working-directory: ./backend

      - name: Run Format Check
        run: npm run format:check
        working-directory: ./backend

      - name: Configure Test Environment
        run: |
          echo "DB_TEST_USER=postgres" >> .env.test
          echo "DB_TEST_PASS=postgres" >> .env.test
          echo "DB_TEST_NAME=flight_booking_test" >> .env.test
          echo "DB_TEST_HOST=localhost" >> .env.test
          echo "DB_TEST_PORT=5432" >> .env.test
        working-directory: ./backend

      - name: Wait for PostgreSQL
        run: |
          until pg_isready -h localhost -p 5432 -U postgres; do
            echo "Waiting for PostgreSQL...";
            sleep 2;
          done
        env:
          PGPASSWORD: postgres

      - name: Create Test Database
        run: |
          psql -h localhost -U postgres -tc "SELECT 1 FROM pg_database WHERE datname = 'flight_booking_test'" | grep -q 1 || \
          psql -h localhost -U postgres -c "CREATE DATABASE flight_booking_test;"
        env:
          PGPASSWORD: postgres

      - name: Run Migrations
        run: npx sequelize-cli db:migrate --env test
        working-directory: ./backend

      - name: Run Tests with Coverage
        run: npm run test:coverage
        working-directory: ./backend
        env:
          NODE_ENV: test

      - name: Upload Coverage Reports
        uses: codecov/codecov-action@v3
        with:
          file: ./backend/coverage/lcov.info
          flags: backend
          name: backend-coverage
